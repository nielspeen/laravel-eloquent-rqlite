<?php

namespace Wanwire\LaravelEloquentRqlite\Driver;

use Doctrine\DBAL\Driver\Result;

use Doctrine\DBAL\ParameterType;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Http\Client\PendingRequest;
use Illuminate\Support\Str;
use PDO;
use PDOException;

//class RqliteStatement extends \PDOStatement implements \Doctrine\DBAL\Driver\Statement
class RqliteStatement extends \PDOStatement implements \Doctrine\DBAL\Driver\Statement
{
    private string $sql;

    private PendingRequest $connection;
    public int $lastInsertId;

    /**
     * @var array
     */
    private array $parameterizedMap = [];

    public function __construct(string $sql, PendingRequest $connection)
    {
        $this->sql = $sql;
        $this->connection = $connection;
    }

    public function bindValue($param, $value, $type = ParameterType::STRING): bool
    {
        $this->parameterizedMap[] = $value;

        return true;
    }

    public function bindParam(
        $param,
        mixed &$variable,
        $type = PDO::PARAM_STR,
        $length = 0,
        mixed $driverOptions = null
    ): bool {
        return parent::bindParam($param, $variable, $type, $length, $driverOptions); // TODO: Change the autogenerated stub
    }

    #[\ReturnTypeWillChange]
    public function execute($params = null): Result
    {
        return new RqliteResult($this->requestRqliteByHttp());
    }

    public function fetchAll(int $mode = PDO::FETCH_DEFAULT,  mixed ...$args): array
    {
        $results = $this->requestRqliteByHttp();

        if(empty($results)) {
            return [];
        }

        $results = $results[0];

        $tmp = [];
        if (isset($results['values'])) {
            foreach ($results['values'] as $key => $item) {
                foreach ($results['columns'] as $k => $i) {
                    //\PDO::FETCH_BOTH
                    //$tmp[$key][$k] = $item[$k];
                    $tmp[$key][$i] = $item[$k];
                }
            }
        }

        return $tmp;
    }

    private function makeRequestData(string $sql, array $parameterizedMap): array
    {
        return [[$sql, ...$parameterizedMap]];
    }

    private function requestRqliteByHttp()
    {
        if (Str::startsWith(Str::upper($this->sql), ['SELECT', 'PRAGMA'])) {
            $uri = '/db/query';
        } else {
            $uri = '/db/execute';
        }

        $jsonOptionData = $this->makeRequestData($this->sql, $this->parameterizedMap);
        $response = $this->connection->post($uri, $jsonOptionData);
        if($response->status() !== 200) {
            dd($response);
        }
        $result = json_decode($response->body(), true);

        if (isset($result['results'])) {
            collect($result['results'])->map(function ($item) {
                if (isset($item['error'])) {
                    throw new PDOException($item['error']);
                }
            });
        }

        if(isset($result['results'][0]['last_insert_id'])) {
            $this->lastInsertId = $result['results'][0]['last_insert_id'];
        }

        return $result['results'];
    }

    public function setFetchMode($mode, $className = null, ...$params)
    {
    //    parent::setFetchMode($mode, $className, $params); // TODO: Change the autogenerated stub
    }


    // TODO: hack to fix delete
    public function rowCount(): int
    {
        return 0;
    }

}
